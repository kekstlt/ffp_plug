#!/ffp/bin/sh

unset name command
unset required_files required_dirs
unset start_cmd stop_cmd status_cmd
unset warned

die()
{
	echo "$@"
	exit 1
}

warn()
{
    echo "WARNING: $@"
    warned=1
}

check_required_files()
{
	for _f in "$@"; do
		if [ ! -r "$_f" ]; then
			die "$_f: Required file not found or not readable"
		fi
	done
}

check_required_dirs()
{
	for _d in "$@"; do
		if [ ! -d "$_d" ]; then
			die "$_d: Required directory not found"
		fi
	done
}

find_pids()
{
	_prog=$(basename $1)
    ps axo pid,comm,args 2>/dev/null | while read _pid _comm _arg0 _args; do
        if [ "$_arg0" = "$1" -o "$_comm" = "$_prog" ]; then
            echo -n "$_pid "
        fi
    done
    echo
}

proc_start()
{
    while [ $# -gt 0 ]; do
        _cmd=$(basename $1)
        eval _flags=\$$(echo $_cmd | tr '.-' '_')_flags
        _pids=$(find_pids $_cmd)

        if test -z "$_pids"; then
            test -x "$1"     || die "$1: Not executable"
            echo "Starting $1 $_flags"
            $1 $_flags
        else
            warn "$_cmd: Already running"
        fi

        shift 1
    done
}

# variant of proc_start that detaches a process and redirects output
# to /ffp/var/log/name.log
proc_start_bg()
{
    while [ $# -gt 0 ]; do
        _cmd=$(basename $1)
        eval _flags=\$$(echo $_cmd | tr '.-' '_')_flags
        mkdir -p /ffp/var/log
        _log=/ffp/var/log/$(echo $_cmd).log
        _pids=$(find_pids $_cmd)
        if test -z "$_pids"; then
            test -x "$1"     || die "$1: Not executable"
            echo "Starting $1 $_flags"
            $1 $_flags 1>$_log 2>&1 </dev/null &
        else
            warn "$_cmd: Already running"
        fi
        shift 1
    done
}
                      
proc_stop()
{
    while [ $# -gt 0 ]; do
        _cmd=$(basename $1)
        _pids=$(find_pids $_cmd)

        if test -n "$_pids"; then
            echo "Stopping $_cmd"	
            kill $_pids
        else
            warn "$_cmd: Not running"
        fi

        shift 1
    done
}

proc_status()
{
    while [ $# -gt 0 ]; do
        _cmd=$(basename $1)
        _pids=$(find_pids $_cmd)
        
        if test -n "$_pids"; then
            echo "$_cmd running as pid $_pids"
        else
            echo "$_cmd not running"
        fi

        shift 1
    done
}

run_rc_command()
{
    case "$1" in
        start)
            test -n "$required_files" && check_required_files $required_files
            test -n "$required_dirs"  && check_required_dirs $required_dirs

            if test -n "$start_cmd"; then
                $start_cmd
            elif test -n "$command"; then
                proc_start $command
            fi
            ;;

        stop)
            if test -n "$stop_cmd"; then
                $stop_cmd
            elif test -n "$command"; then
                proc_stop $command
            fi
            ;;

        status)
            if test -n "$status_cmd"; then
                $status_cmd
            elif test -n "$command"; then
                proc_status $command
            fi
            ;;

        restart)
               if test -n "$restart_cmd"; then
                       $restart_cmd
               else
                       ( /ffp/bin/sh $0 stop )
                       sleep 1
                       /ffp/bin/sh $0 start
               fi
               ;;

        *)
		# check $extra_commands
		for _rc_cmd in $extra_commands; do
			if [ "$1" = "$_rc_cmd" ]; then
				eval _cmd=\$${_rc_cmd}_cmd
                    		$_cmd
				return 0
			fi
		done

		# reject unknown commands
		echo "Usage: $(basename $0) start|stop|restart|status"
		if [ -n "$extra_commands" ]; then
			echo "Extra commands: $extra_commands"
		fi
		exit 1
    esac
}
